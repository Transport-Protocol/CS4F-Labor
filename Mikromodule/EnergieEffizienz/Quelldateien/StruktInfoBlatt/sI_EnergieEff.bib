
@inproceedings{pereira_energy_2017,
	address = {New York, NY, USA},
	series = {{SLE} 2017},
	title = {Energy efficiency across programming languages: how do energy, time, and memory relate?},
	isbn = {978-1-4503-5525-4},
	shorttitle = {Energy efficiency across programming languages},
	url = {https://dl.acm.org/doi/10.1145/3136014.3136031},
	doi = {10.1145/3136014.3136031},
	abstract = {This paper presents a study of the runtime, memory usage and energy consumption of twenty seven well-known software languages. We monitor the performance of such languages using ten different programming problems, expressed in each of the languages. Our results show interesting findings, such as, slower/faster languages consuming less/more energy, and how memory usage influences energy consumption. Finally, we show how to use our results to provide software engineers support to decide which language to use when energy efficiency is a concern.},
	urldate = {2023-11-13},
	booktitle = {Proceedings of the 10th {ACM} {SIGPLAN} {International} {Conference} on {Software} {Language} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Pereira, Rui and Couto, Marco and Ribeiro, Francisco and Rua, Rui and Cunha, Jácome and Fernandes, João Paulo and Saraiva, João},
	month = oct,
	year = {2017},
	keywords = {Energy Efficiency, Programming Languages, Green Software, Language Benchmarking},
	pages = {256--267},
	file = {Full Text PDF:C\:\\Users\\julia\\Zotero\\storage\\I4G58PW7\\Pereira et al. - 2017 - Energy efficiency across programming languages ho.pdf:application/pdf},
}

@incollection{yuki_Folkore_2014,
	address = {Cham},
	title = {Folklore {Confirmed}: {Compiling} for {Speed} \$\$=\$\$ {Compiling} for {Energy}},
	volume = {8664},
	isbn = {978-3-319-09966-8 978-3-319-09967-5},
	shorttitle = {Folklore {Confirmed}},
	url = {https://link.springer.com/10.1007/978-3-319-09967-5_10},
	language = {en},
	urldate = {2023-11-13},
	booktitle = {Languages and {Compilers} for {Parallel} {Computing}},
	publisher = {Springer International Publishing},
	author = {Yuki, Tomofumi and Rajopadhye, Sanjay},
	editor = {Cașcaval, Călin and Montesinos, Pablo},
	year = {2014},
	doi = {10.1007/978-3-319-09967-5_10},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {169--184},
	file = {Yuki und Rajopadhye - 2014 - Folklore Confirmed Compiling for Speed \$\$=\$\$ Comp.pdf:C\:\\Users\\julia\\Zotero\\storage\\TKHKRFVH\\Yuki und Rajopadhye - 2014 - Folklore Confirmed Compiling for Speed \$\$=\$\$ Comp.pdf:application/pdf},
}

@article{trefethen_energy-aware_2013,
	series = {Scalable {Algorithms} for {Large}-{Scale} {Systems} {Workshop} ({ScalA2011}), {Supercomputing} 2011},
	title = {Energy-aware software: {Challenges}, opportunities and strategies},
	volume = {4},
	issn = {1877-7503},
	shorttitle = {Energy-aware software},
	url = {https://www.sciencedirect.com/science/article/pii/S1877750313000173},
	doi = {10.1016/j.jocs.2013.01.005},
	abstract = {Energy consumption of computing systems has become a major concern. Constrained by cost, environmental concerns and policy, minimising the energy foot-print of computing systems is one of the primary goals of many initiatives. As we move towards exascale computing, energy constraints become very real and are a major driver in design decisions. The issue is also apparent at the scale of desk top machines, where many core and accelerator chips are common and offer a spectrum of opportunities for balancing energy and performance. Conventionally, approaches for reducing energy consumption have been either at the operational level (such as powering down all or part of systems) or at the hardware design level (such as utilising specialised low-energy components). In this paper, we are interested in a different approach; energy-aware software. By measuring the energy consumption of a computer application and understanding where the energy usage lies, may allow a change of the software to provide opportunities for energy savings. In order to understand the complexities of this approach, we specifically look at multithreaded algorithms and applications. By an evaluation of a benchmark suite on multiple architectures and multiple environments, we show how basic parameters, such as threading options, compilers and frequencies, can impact energy consumption. As such, we provide an overview of the challenges that face software developers in this regard. We then offer a view of the directions that need to be taken and possible strategies needed for building energy-aware software.},
	number = {6},
	urldate = {2023-11-13},
	journal = {Journal of Computational Science},
	author = {Trefethen, Anne E. and Thiyagalingam, Jeyarajan},
	month = nov,
	year = {2013},
	pages = {444--449},
	file = {ScienceDirect Snapshot:C\:\\Users\\julia\\Zotero\\storage\\IQ8XH5V7\\S1877750313000173.html:text/html},
}

@inproceedings{georgiou_analyzing_2017,
	address = {New York, NY, USA},
	series = {{PCI} '17},
	title = {Analyzing {Programming} {Languages}' {Energy} {Consumption}: {An} {Empirical} {Study}},
	isbn = {978-1-4503-5355-7},
	shorttitle = {Analyzing {Programming} {Languages}' {Energy} {Consumption}},
	url = {https://doi.org/10.1145/3139367.3139418},
	doi = {10.1145/3139367.3139418},
	abstract = {Motivation: The energy efficiency of it-related products, from the software perspective, has gained vast popularity the recent years and paved a new emerging research field. However, there is limited number of research works regarding the energy consumption of relatively small programming tasks. This knowledge is critical to be known especially in cases where millions of small tasks are running in parallel on multiple devices all around the globe. Goal: In this preliminary study, we aim to identify energy implications of small, independent tasks developed in different programming languages; compiled, semi-compiled, and interpreted ones. Method: To achieve our purpose, we collected, refined, compared, and analyzed a number of implemented tasks from Rosetta Code, that is a publicly available Repository for programming chrestomathy. Results: Our analysis shows that among compiled programming languages such as C, C++, Java, and Go offer the highest energy efficiency for all of our tested tasks compared to C\#, VB.Net, and Rust. Regarding interpreted programming languages PHP, Ruby, and JavaScript exhibit the most energy savings compared to Swift, R, Perl, and Python.},
	urldate = {2023-11-13},
	booktitle = {Proceedings of the 21st {Pan}-{Hellenic} {Conference} on {Informatics}},
	publisher = {Association for Computing Machinery},
	author = {Georgiou, Stefanos and Kechagia, Maria and Spinellis, Diomidis},
	month = sep,
	year = {2017},
	keywords = {Energy Efficiency, Energy Optimization, Programming Languages},
	pages = {1--6},
}
